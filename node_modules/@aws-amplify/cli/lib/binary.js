"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Binary = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const child_process_1 = require("child_process");
const util_1 = __importDefault(require("util"));
const stream_1 = __importDefault(require("stream"));
const os_1 = __importDefault(require("os"));
const axios_1 = __importDefault(require("axios"));
const rimraf_1 = __importDefault(require("rimraf"));
const package_json_1 = require("./package.json");
const BINARY_LOCATION = 'https://d2bkhsss993doa.cloudfront.net';
const pipeline = util_1.default.promisify(stream_1.default.pipeline);
const error = (msg) => {
    console.error(msg);
    process.exit(1);
};
const supportedPlatforms = [
    {
        TYPE: 'Windows_NT',
        ARCHITECTURE: 'x64',
        BINARY_NAME: 'amplify-pkg-win.exe',
    },
    {
        TYPE: 'Linux',
        ARCHITECTURE: 'x64',
        BINARY_NAME: 'amplify-pkg-linux-x64',
    },
    {
        TYPE: 'Linux',
        ARCHITECTURE: 'arm64',
        BINARY_NAME: 'amplify-pkg-linux-arm64',
    },
    {
        TYPE: 'Darwin',
        ARCHITECTURE: 'x64',
        BINARY_NAME: 'amplify-pkg-macos',
    },
    {
        TYPE: 'Darwin',
        ARCHITECTURE: 'arm64',
        BINARY_NAME: 'amplify-pkg-macos',
    },
];
const getPlatformBinaryName = () => {
    const type = os_1.default.type();
    const architecture = os_1.default.arch();
    const platform = supportedPlatforms.find(platformInfo => type === platformInfo.TYPE && architecture === platformInfo.ARCHITECTURE);
    if (!platform) {
        error(`Platform with type "${type}" and architecture "${architecture}" is not supported by ${package_json_1.name}.}`);
    }
    return platform.BINARY_NAME;
};
const getBinaryUrl = () => {
    const binaryName = getPlatformBinaryName();
    let url = `${BINARY_LOCATION}/${package_json_1.version}/${binaryName}`;
    if (process.env.IS_AMPLIFY_CI) {
        if (url.endsWith('.exe')) {
            url = url.replace('.exe', `-${getCommitHash()}.exe`);
        }
        else {
            url += `-${getCommitHash()}`;
        }
    }
    return url;
};
const getCommitHash = () => {
    if (process.env.hash) {
        return process.env.hash;
    }
    const hash = (0, child_process_1.execSync)('(git rev-parse HEAD | cut -c 1-12) || false').toString();
    return hash.substr(0, 12);
};
class Binary {
    constructor() {
        this.installDirectory = (0, path_1.join)(os_1.default.homedir(), '.amplify', 'bin');
        if (!(0, fs_1.existsSync)(this.installDirectory)) {
            (0, fs_1.mkdirSync)(this.installDirectory, { recursive: true });
        }
        let amplifyExecutableName = 'amplify';
        if (getPlatformBinaryName().endsWith('.exe')) {
            amplifyExecutableName = 'amplify.exe';
        }
        this.binaryPath = (0, path_1.join)(this.installDirectory, amplifyExecutableName);
    }
    async install() {
        if ((0, fs_1.existsSync)(this.installDirectory)) {
            rimraf_1.default.sync(this.installDirectory);
        }
        (0, fs_1.mkdirSync)(this.installDirectory, { recursive: true });
        console.log(`Downloading release from ${getBinaryUrl()}`);
        try {
            const res = await (0, axios_1.default)({ url: getBinaryUrl(), responseType: 'stream' });
            await pipeline(res.data, (0, fs_1.createWriteStream)(this.binaryPath, {
                mode: 0o755,
            }));
            console.log('amplify has been installed!');
            (0, child_process_1.spawnSync)(this.binaryPath, ['version'], { cwd: process.cwd(), stdio: 'inherit' });
        }
        catch (e) {
            error(`Error fetching release: ${e.message}`);
        }
    }
    async run() {
        if (!(0, fs_1.existsSync)(this.binaryPath)) {
            await this.install();
        }
        const [, , ...args] = process.argv;
        const result = (0, child_process_1.spawnSync)(this.binaryPath, args, { cwd: process.cwd(), stdio: 'inherit' });
        process.exit(result.status);
    }
}
exports.Binary = Binary;
//# sourceMappingURL=binary.js.map